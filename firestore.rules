/**
 * @fileoverview Firestore Security Rules for LandEase Prototyping.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model. Users can only read and
 * write data under their own user ID. This approach prioritizes data privacy
 * and prevents unauthorized access. All writes must be authenticated.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /users/{userId}/submissions/{submissionId}: Stores form submissions, accessible only to the owning user.
 *
 * Key Security Decisions:
 * - Users can only manage data associated with their own userId.
 * - Public listing of users or submissions is disallowed.
 *
 * Denormalization for Authorization:
 *  - The `userId` is present both in the path (`/users/{userId}`) and potentially as a field within documents
 *    under that path. This allows for simple, efficient ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and it exists.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces user-specific data access.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile document.
     *   Request: { auth: { uid: 'user123' }, method: 'create', path: '/databases/(default)/documents/users/user123', resource: { data: { id: 'user123', email: 'user123@example.com' } } }
     * @allow (get) - User with UID 'user123' can read their own profile document.
     *   Request: { auth: { uid: 'user123' }, method: 'get', path: '/databases/(default)/documents/users/user123' }
     * @allow (update) - User with UID 'user123' can update their own profile document.
     *   Request: { auth: { uid: 'user123' }, method: 'update', path: '/databases/(default)/documents/users/user123', resource: { data: { id: 'user123', email: 'newemail@example.com' } } }
     * @allow (delete) - User with UID 'user123' can delete their own profile document.
     *   Request: { auth: { uid: 'user123' }, method: 'delete', path: '/databases/(default)/documents/users/user123' }
     * @deny (create) - User with UID 'user456' cannot create a profile document for user 'user123'.
     *   Request: { auth: { uid: 'user456' }, method: 'create', path: '/databases/(default)/documents/users/user123', resource: { data: { id: 'user123', email: 'user123@example.com' } } }
     * @deny (get) - User with UID 'user456' cannot read the profile document for user 'user123'.
     *   Request: { auth: { uid: 'user456' }, method: 'get', path: '/databases/(default)/documents/users/user123' }
     * @deny (update) - User with UID 'user456' cannot update the profile document for user 'user123'.
     *   Request: { auth: { uid: 'user456' }, method: 'update', path: '/databases/(default)/documents/users/user123', resource: { data: { id: 'user123', email: 'newemail@example.com' } } }
     * @deny (delete) - User with UID 'user456' cannot delete the profile document for user 'user123'.
     *   Request: { auth: { uid: 'user456' }, method: 'delete', path: '/databases/(default)/documents/users/user123' }
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-specific data access for submissions.
     * @path /users/{userId}/submissions/{submissionId}
     * @allow (create) - User with UID 'user123' can create a submission under their profile.
     *   Request: { auth: { uid: 'user123' }, method: 'create', path: '/databases/(default)/documents/users/user123/submissions/sub1', resource: { data: { pageId: 'page1', pageName: 'Home', formData: {}, submittedAt: '2024-01-01T00:00:00Z' } } }
     * @allow (get) - User with UID 'user123' can read a submission under their profile.
     *   Request: { auth: { uid: 'user123' }, method: 'get', path: '/databases/(default)/documents/users/user123/submissions/sub1' }
     * @allow (update) - User with UID 'user123' can update a submission under their profile.
     *   Request: { auth: { uid: 'user123' }, method: 'update', path: '/databases/(default)/documents/users/user123/submissions/sub1', resource: { data: { pageId: 'page1', pageName: 'Home', formData: { newField: 'newValue' }, submittedAt: '2024-01-01T00:00:00Z' } } }
     * @allow (delete) - User with UID 'user123' can delete a submission under their profile.
     *   Request: { auth: { uid: 'user123' }, method: 'delete', path: '/databases/(default)/documents/users/user123/submissions/sub1' }
     * @deny (create) - User with UID 'user456' cannot create a submission under user 'user123's profile.
     *   Request: { auth: { uid: 'user456' }, method: 'create', path: '/databases/(default)/documents/users/user123/submissions/sub1', resource: { data: { pageId: 'page1', pageName: 'Home', formData: {}, submittedAt: '2024-01-01T00:00:00Z' } } }
     * @deny (get) - User with UID 'user456' cannot read a submission under user 'user123's profile.
     *   Request: { auth: { uid: 'user456' }, method: 'get', path: '/databases/(default)/documents/users/user123/submissions/sub1' }
     * @deny (update) - User with UID 'user456' cannot update a submission under user 'user123's profile.
     *   Request: { auth: { uid: 'user456' }, method: 'update', path: '/databases/(default)/documents/users/user123/submissions/sub1', resource: { data: { pageId: 'page1', pageName: 'Home', formData: { newField: 'newValue' }, submittedAt: '2024-01-01T00:00:00Z' } } }
     * @deny (delete) - User with UID 'user456' cannot delete a submission under user 'user123's profile.
     *   Request: { auth: { uid: 'user456' }, method: 'delete', path: '/databases/(default)/documents/users/user123/submissions/sub1' }
     * @principle Enforces document ownership for all operations on user submissions.
     */
    match /users/{userId}/submissions/{submissionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Publicly readable collection with owner-only writes is disabled by default due to schema lacking of a required field `userId`.
      * @path /pages
      * @principle Publicly readable collection with owner-only writes.
      */
    match /pages/{pageId} {
        allow get: if true;
        allow list: if true;
        allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        // CRITICAL: Cannot implement owner-only writes. The 'pages' documents are missing an 'userId' field.
    }
  }
}