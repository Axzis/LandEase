/**
 * @fileoverview Firestore Security Rules for LandEase Prototyping.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for user profiles and their associated form submissions.
 * All data is nested under /users/{userId}, ensuring that only the authenticated user can access their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, with userId matching the Firebase Auth UID.
 * - /users/{userId}/submissions/{submissionId}: Stores form submissions associated with a specific user.
 *
 * Key Security Decisions:
 * - User listing is explicitly disallowed.
 * - Users can only create their own profile document (self-creation).
 * - Submissions are strictly owned by the user and cannot be accessed by others.
 *
 * Denormalization for Authorization:
 * - The `userId` is embedded within both the `/users/{userId}` document (on creation) and the `/users/{userId}/submissions/{submissionId}` documents to ensure the path matches the document's owner. This prevents unauthorized data manipulation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
     * @description Checks if the authenticated user's UID matches the provided userId and that resource exists.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }


    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own profile if the userId matches their UID.
     * @allow (get, update, delete) Signed-in user can read, update, and delete their own profile.
     * @deny (create) User cannot create a profile with a userId that doesn't match their UID.
     * @deny (get, update, delete) User cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for form submissions within a user's profile.
     * @path /users/{userId}/submissions/{submissionId}
     * @allow (create) Signed-in user can create a submission under their own profile.
     * @allow (get, list, update, delete) Signed-in user can read, list, update, and delete their own submissions.
     * @deny (create) User cannot create a submission under another user's profile.
     * @deny (get, list, update, delete) User cannot read, list, update, or delete another user's submissions.
     * @principle Enforces document ownership for form submissions.
     */
    match /users/{userId}/submissions/{submissionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for pages.
     * @path /pages/{pageId}
     * @allow (get) Allow public read access to pages.
     * @deny (create, update, delete, list) Deny all write and list operations on pages.
     * @principle Allow public read access to pages, but restrict all other operations.
     */
    match /pages/{pageId} {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}