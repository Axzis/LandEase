/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for the LandEase application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, where {userId} is the Firebase Auth UID.
 * - /users/{userId}/submissions/{submissionId}: Stores form submissions for a specific user, associated with a page.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent unauthorized access to user data.
 * - Only the authenticated user can create, read, update, or delete their own profile and submissions.
 * - Data validation is limited to checking ownership on create and enforcing immutability of the owner ID on updates. Other data shapes are not validated.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, ensuring only the authenticated user can access their own data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile if request.auth.uid == 'user_abc'.
     * @allow (get) User with UID 'user_abc' can read their profile.
     * @allow (update) User with UID 'user_abc' can update their profile.
     * @allow (delete) User with UID 'user_abc' can delete their profile.
     * @deny (create) User with UID 'user_xyz' cannot create a profile for 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot read the profile of 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update the profile of 'user_abc'.
     * @deny (delete) User with UID 'user_xyz' cannot delete the profile of 'user_abc'.
     * @principle Enforces document ownership and protects user data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects form submissions, ensuring only the authenticated user can access their own submissions.
     * @path /users/{userId}/submissions/{submissionId}
     * @allow (create) User with UID 'user_abc' can create a submission under their profile if request.auth.uid == 'user_abc'.
     * @allow (get) User with UID 'user_abc' can read their submission.
     * @allow (update) User with UID 'user_abc' can update their submission.
     * @allow (delete) User with UID 'user_abc' can delete their submission.
     * @deny (create) User with UID 'user_xyz' cannot create a submission under 'user_abc''s profile.
     * @deny (get) User with UID 'user_xyz' cannot read the submission of 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update the submission of 'user_abc'.
     * @deny (delete) User with UID 'user_xyz' cannot delete the submission of 'user_abc'.
     * @principle Enforces document ownership for writes and protects user data.
     */
    match /users/{userId}/submissions/{submissionId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        allow get: if isSignedIn() && isOwner(userId);
        allow list: if false;
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId);
        allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}