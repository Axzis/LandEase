/**
 * @file Firebase Security Rules for LandEase
 * @version Prototyping
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles and their associated form submissions.
 * @data_structure User profiles are stored under `/users/{userId}`, and each user's submissions are stored in a subcollection `/users/{userId}/submissions/{submissionId}`.
 * @key_security_decisions User listing is disallowed. Submissions are strictly owned by the user; no shared access is permitted. The system defaults to a secure posture, denying access unless explicitly granted.
 * @denormalization Not applicable in this version.
 * @structural_segregation Not applicable in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile at /users/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, or delete their profile at /users/user_abc.
     * @deny (get, update, delete) User with UID 'user_xyz' cannot read, update, or delete the profile at /users/user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the authenticated user is the owner of the resource
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure user submissions. Only the authenticated user can read or write their own submissions.
     * @path /users/{userId}/submissions/{submissionId}
     * @allow (create) User with UID 'user_abc' can create a submission at /users/user_abc/submissions/sub_123.
     * @deny (create) User with UID 'user_xyz' cannot create a submission at /users/user_abc/submissions/sub_123.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, or delete their submission at /users/user_abc/submissions/sub_123.
     * @deny (get, update, delete) User with UID 'user_xyz' cannot read, update, or delete the submission at /users/user_abc/submissions/sub_123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/submissions/{submissionId} {
      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the authenticated user is the owner of the resource
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}