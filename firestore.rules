/**
 * @file Firebase Security Rules for LandEase Firestore.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Users can only read and write their own data.  Public listing of user data is disallowed.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/submissions/{submissionId}: Stores form submissions specific to a user.
 *
 * Key Security Decisions:
 * - No public listing of user profiles or submissions.
 * - User IDs in paths must match the authenticated user's UID.
 * - Data shape validation is relaxed to allow for prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles.  Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get) User with ID 'user123' can get their profile if authenticated as 'user123'.
     * @allow (update) User with ID 'user123' can update their profile if authenticated as 'user123'.
     * @allow (delete) User with ID 'user123' can delete their profile if authenticated as 'user123'.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get) User with ID 'user456' cannot get the profile for 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      
      // Helper function to check if the authenticated user is the owner of the document AND the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create their own profile, enforcing that the userId matches auth.uid
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow the user to get their own profile
      allow get: if isOwner(userId);

      // Allow the user to list their own profile (this is unusual but included for completeness)
      allow list: if isOwner(userId);

      // Allow the user to update their own profile
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow the user to delete their own profile
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure form submissions for a specific user.  Only the authenticated user can manage their own submissions.
     * @path /users/{userId}/submissions/{submissionId}
     * @allow (create) User with ID 'user123' can create a submission under their profile.
     * @allow (get) User with ID 'user123' can get a submission under their profile.
     * @allow (update) User with ID 'user123' can update a submission under their profile.
     * @allow (delete) User with ID 'user123' can delete a submission under their profile.
     * @deny (create) User with ID 'user456' cannot create a submission under 'user123' profile.
     * @deny (get) User with ID 'user456' cannot get a submission under 'user123' profile.
     * @principle Enforces document ownership and prevents cross-user data access.
     */
    match /users/{userId}/submissions/{submissionId} {
      // Helper function to check if the authenticated user is the owner of the document
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      
      // Helper function to check if the authenticated user is the owner of the document AND the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create a submission under their profile
      allow create: if isOwner(userId);

      // Allow the user to get a submission under their profile
      allow get: if isOwner(userId);

      // Allow the user to list submissions under their profile.
      allow list: if isOwner(userId);

      // Allow the user to update a submission under their profile
      allow update: if isExistingOwner(userId);

      // Allow the user to delete a submission under their profile
      allow delete: if isExistingOwner(userId);
    }
    
     /**
      * @description Allows public read access to pages.
      * @path /pages/{pageId}
      * @allow (get) Any user can read a page.
      * @allow (list) Any user can list pages.
      * @deny (create) No user can create a page.
      * @deny (update) No user can update a page.
      * @deny (delete) No user can delete a page.
      * @principle Allows public read access while denying all write operations.
      */
    match /pages/{pageId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}