/**
 * @fileoverview Firestore Security Rules for LandEase application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Users can only
 * read and write their own data.  Listing of users is disallowed.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.  The userId MUST match the
 *   authenticated user's UID.
 * - /users/{userId}/submissions/{submissionId}: Stores form submissions
 *   for a specific user.  Only the owning user can manage these submissions.
 *
 * Key Security Decisions:
 * - No global admin roles are defined; access is strictly user-centric.
 * - Listing the contents of the /users collection is forbidden to prevent
 *   unauthorized enumeration of user accounts.
 * - Submissions are owned by the user ID in the path.
 *
 * Denormalization for Authorization:
 *  - The `submissionId` is denormalized to be part of the path itself, this is enforced on document creation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }


    /**
     * @description Rules for the /users/{userId} collection.  Allows a user to create their own profile,
     *              and read their own profile.  Disallows listing all users.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create a document at /users/user123
     * @allow (get) - User with UID 'user123' can get the document at /users/user123
     * @deny (create) - User with UID 'user456' cannot create a document at /users/user123
     * @deny (update) - User with UID 'user456' cannot update the document at /users/user123
     * @deny (delete) - User with UID 'user456' cannot delete the document at /users/user123
     * @deny (list) - No one can list the documents in /users
     * @principle Enforces document ownership and prevents unauthorized listing of user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/submissions/{submissionId} collection. Allows a user to manage their own submissions.
     * @path /users/{userId}/submissions/{submissionId}
     * @allow (create) - User with UID 'user123' can create a submission at /users/user123/submissions/sub123
     * @allow (get) - User with UID 'user123' can get the submission at /users/user123/submissions/sub123
     * @deny (create) - User with UID 'user456' cannot create a submission at /users/user123/submissions/sub123
     * @deny (update) - User with UID 'user456' cannot update the submission at /users/user123/submissions/sub123
     * @deny (delete) - User with UID 'user456' cannot delete the submission at /users/user123/submissions/sub123
     * @principle Enforces document ownership for submissions.
     */
    match /users/{userId}/submissions/{submissionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == submissionId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}