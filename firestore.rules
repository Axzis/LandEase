/**
 * @file Overview
 * This ruleset enforces a user-ownership model for all data. Each user can only access their own profile and associated submissions.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. The {userId} must match the authenticated user's UID.
 * - /users/{userId}/submissions/{submissionId}: Stores form submissions for a specific user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own data.
 * - Listing all users or submissions across all users is disallowed.
 * - Data consistency is enforced between the path and the document's internal ID fields.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data, ensuring only the authenticated user can access their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile at /users/user_abc.
     * @allow (get) - User with UID 'user_abc' can read their profile at /users/user_abc.
     * @allow (update) - User with UID 'user_abc' can update their profile at /users/user_abc.
     * @allow (delete) - User with UID 'user_abc' can delete their profile at /users/user_abc.
     * @deny (create) - User with UID 'user_def' cannot create a profile at /users/user_abc.
     * @deny (get) - User with UID 'user_def' cannot read the profile at /users/user_abc.
     * @deny (update) - User with UID 'user_def' cannot update the profile at /users/user_abc.
     * @deny (delete) - User with UID 'user_def' cannot delete the profile at /users/user_abc.
     * @principle Enforces strict user ownership for profile data.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages form submissions for a specific user. Only the authenticated user can access their own submissions.
     * @path /users/{userId}/submissions/{submissionId}
     * @allow (create) - User with UID 'user_abc' can create a submission at /users/user_abc/submissions/sub_123.
     * @allow (get) - User with UID 'user_abc' can read their submission at /users/user_abc/submissions/sub_123.
     * @allow (update) - User with UID 'user_abc' can update their submission at /users/user_abc/submissions/sub_123.
     * @allow (delete) - User with UID 'user_abc' can delete their submission at /users/user_abc/submissions/sub_123.
     * @deny (create) - User with UID 'user_def' cannot create a submission at /users/user_abc/submissions/sub_123.
     * @deny (get) - User with UID 'user_def' cannot read the submission at /users/user_abc/submissions/sub_123.
     * @deny (update) - User with UID 'user_def' cannot update the submission at /users/user_abc/submissions/sub_123.
     * @deny (delete) - User with UID 'user_def' cannot delete the submission at /users/user_abc/submissions/sub_123.
     * @principle Enforces user ownership for form submissions.
     */
    match /users/{userId}/submissions/{submissionId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}