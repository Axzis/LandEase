/**
 * @description This ruleset enforces a strict user-ownership model for user profiles and their associated form submissions.
 * Users can only read and write their own profile data and submissions.
 * @dataStructure
 * - `/users/{userId}`: Stores user profile data.
 * - `/users/{userId}/submissions/{submissionId}`: Stores form submissions for a given user.
 * @keySecurityDecisions
 * - Users can only manage their own data. Listing all users or submissions across users is disallowed.
 * - Only authenticated users can access data.
 * @denormalizationForAuthorization N/A (Ownership is determined by the path)
 * @structuralSegregation All private data is nested under the /users/{userId} path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId The user ID that should own the document.
     * @return {boolean} True if the user is signed in, owns the document, and the document exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) If the user is signed in and the userId matches the authenticated user's UID.
     * @allow (get, update, delete) If the user is signed in and the userId matches the authenticated user's UID.
     * @deny (create) If the user is not signed in.
     * @deny (get, update, delete) If the user is not signed in or the userId does not match the authenticated user's UID.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for form submissions under a user's profile.
     * @path /users/{userId}/submissions/{submissionId}
     * @allow (create) If the user is signed in and the userId matches the authenticated user's UID.
     * @allow (get, update, delete) If the user is signed in and the userId matches the authenticated user's UID.
     * @deny (create) If the user is not signed in.
     * @deny (get, update, delete) If the user is not signed in or the userId does not match the authenticated user's UID.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/submissions/{submissionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}