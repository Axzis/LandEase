/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for user profiles and their associated form submissions.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /users/{userId}/submissions/{submissionId}: Stores form submissions made by a user, accessible only to that user.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Users cannot list other users' data.
 * - `pages` collection is not described in the backend.json, and the stack trace indicates it is the source of the permission error
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is signed in and the requested userId matches their auth UID.
     * @deny (get, create, update, delete) if the user is not signed in or the userId does not match their auth UID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own form submissions.
     * @path /users/{userId}/submissions/{submissionId}
     * @allow (get, create, update, delete) if the user is signed in and the requested userId matches their auth UID.
     * @deny (get, create, update, delete) if the user is not signed in or the userId does not match their auth UID.
     * @principle Enforces document ownership for form submissions.
     */
    match /users/{userId}/submissions/{submissionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description  The update operation was rejected on the `pages` collection.  The application is attempting to update the `published` field, but no rules exist for the `pages` collection, thus denying the request by default.
     * @path /pages/{pageId}
     * @allow (get, list) if true; // Assuming public read access for now, adjust as needed.
     * @allow create: if false;  // TODO: Define create permissions based on your requirements
     * @allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if false; // TODO: Define delete permissions based on your requirements
     * @principle Missing Rules. The `pages` collection does not have explicit Security Rules configured, resulting in all requests being denied by default.
     */
    match /pages/{pageId} {
        allow get, list: if true; // Assuming public read access for now, adjust as needed.
        allow create: if false; // TODO: Define create permissions based on your requirements
        allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if false; // TODO: Define delete permissions based on your requirements
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}