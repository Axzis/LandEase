/**
 * @fileoverview Firestore Security Rules for LandEase application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and landing pages. Users can only
 * read, update, and delete their own profiles and pages. Submissions to pages are publicly
 * creatable but only readable by the page owner. Listing of users and pages is disallowed.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /pages/{pageId}: Stores private, editable landing pages owned by users.
 * - /pages/{pageId}/submissions/{submissionId}: Stores form submissions for a specific page.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy reasons.
 * - Page listing is disallowed to prevent unauthorized discovery of unpublished content.
 * - Submissions are publicly creatable, enabling anyone to submit a form on a published page.
 *
 * Denormalization for Authorization:
 * - The `Page` entity contains a `userId` field to directly associate it with its owner, avoiding
 *   costly `get()` operations to a separate `users` collection.
 *
 * Structural Segregation:
 * - Uses separate collections for private `/pages/{pageId}` (editable by owner) and public
 *   `/publishedPages/{pageId}` (read-only) to manage different access levels.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (read, update, delete) if the request is made by the user owning the profile (isOwner).
     * @allow (create) if the request is made by an authenticated user (isSignedIn).
     * @deny (list) Always deny listing all users for privacy.
     * @principle Enforces document ownership for profile management.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get, update, delete: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.uid;
      allow list: if false;
    }

    /**
     * @description Controls access to private landing pages.
     * @path /pages/{pageId}
     * @allow (read, update, delete) if the request is made by the page owner (isPageOwner).
     * @allow (create) if the request is made by an authenticated user and the userId in the document matches the authenticated user's UID (isCreatingOwnPage).
     * @deny (list) Always deny listing all pages for privacy.
     * @principle Enforces document ownership for page management.
     */
    match /pages/{pageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isPageOwner(pageId) {
        return isSignedIn() && request.auth.uid == resource.data.userId;
      }

      function isCreatingOwnPage() {
        return isSignedIn() && request.auth.uid == request.resource.data.userId;
      }

      allow get, update, delete: if isPageOwner(pageId);
      allow create: if isCreatingOwnPage();
      allow list: if false;
    }

    /**
     * @description Controls access to form submissions for a specific landing page.
     * @path /pages/{pageId}/submissions/{submissionId}
     * @allow (read, list) if the request is made by the owner of the parent page (isParentPageOwner).
     * @allow (create) Allow anyone to submit a form.
     * @deny (update, delete) Never allow submissions to be updated or deleted.
     * @principle Allows public submissions while restricting read access to the page owner.
     */
    match /pages/{pageId}/submissions/{submissionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParentPageOwner(pageId) {
        let page = get(/databases/$(database)/documents/pages/$(pageId));
        return isSignedIn() && request.auth.uid == page.data.userId;
      }

      allow get, list: if isParentPageOwner(pageId);
      allow create: if true;
      allow update, delete: if false;
    }

       /**
     * @description Controls access to public landing pages.
     * @path /publishedPages/{pageId}
     * @allow (read, list) Allow anyone to read or list published pages.
     * @deny (create, update, delete) Never allow published pages to be created, updated, or deleted directly through this collection.
     * @principle Allows public read access to published pages, read-only for users.
     */
    match /publishedPages/{pageId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}