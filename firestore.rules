/**
 * @fileoverview Firestore Security Rules for LandEase Prototyping.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for user profiles and form submissions,
 * ensuring that users can only access their own data. The rules prioritize simplicity and
 * security, focusing on clear ownership checks. Schema validation is relaxed to facilitate
 * rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with 'userId' matching the Firebase Auth UID.
 * - /users/{userId}/submissions/{submissionId}: Stores form submissions associated with a specific user.
 *
 * Key Security Decisions:
 * - User Listing Disabled: Listing all users is explicitly denied for privacy.
 * - Flexible Schemas: Data type and presence validation is minimized to enable rapid iteration.
 * - Submission data consistency: The submission documents require the pageId and the userId to match the containing document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId AND the resource exists.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user is the owner and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /****************** User Profile Rules ******************/

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User 'bHPXYwsgysTouOFPY0KrcK02b3p1' can create their own profile.
     * @allow (get) User 'bHPXYwsgysTouOFPY0KrcK02b3p1' can get their own profile.
     * @allow (update) User 'bHPXYwsgysTouOFPY0KrcK02b3p1' can update their own profile.
     * @allow (delete) User 'bHPXYwsgysTouOFPY0KrcK02b3p1' can delete their own profile.
     * @deny (create) User 'randomUserId' cannot create a profile for 'bHPXYwsgysTouOFPY0KrcK02b3p1'.
     * @principle Enforces user-ownership: Only the authenticated user can create, read, update, or delete their own profile.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is disabled for privacy

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

    /****************** Submission Rules ******************/

    /**
     * @description Controls access to form submission documents within a user's profile.
     * @path /users/{userId}/submissions/{submissionId}
     * @allow (create) User 'bHPXYwsgysTouOFPY0KrcK02b3p1' can create submissions under their profile.
     * @allow (get) User 'bHPXYwsgysTouOFPY0KrcK02b3p1' can get submissions under their profile.
     * @allow (update) User 'bHPXYwsgysTouOFPY0KrcK02b3p1' can update submissions under their profile.
     * @allow (delete) User 'bHPXYwsgysTouOFPY0KrcK02b3p1' can delete submissions under their profile.
     * @deny (create) User 'randomUserId' cannot create submissions under 'bHPXYwsgysTouOFPY0KrcK02b3p1' profile.
     * @principle Enforces user-ownership and relational integrity: Only the owner of the user profile can manage their submissions.
     */
    match /users/{userId}/submissions/{submissionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.pageId is string && request.resource.data.pageName is string; // Require pageId and pageName on create.
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

        /**
     * @description Public read-only access for pages, write access disabled
     * @path /pages/{pageId}
     * @allow (get, list) Any user can read a page
     * @deny (create, update, delete) No one can create, update, or delete a page
     */
        match /pages/{pageId} {
            allow get, list: if true;
            allow create, update, delete: if false;
        }
  }
}