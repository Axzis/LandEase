/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and their associated form submissions.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.  Each user document is named after the Firebase Auth UID.
 * - /users/{userId}/submissions/{submissionId}: Stores form submissions associated with a specific user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Only the authenticated user can read/write their profile and submissions.
 * - Data consistency between the path and the document's internal ID is enforced.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) Authenticated user can get, update, and delete their own profile if the userId matches their auth UID.
     * @deny (list) Listing all users is not allowed.
     * @deny (create) Authenticated user cannot create a profile with a userId that doesn't match their auth UID.
     * @deny (update, delete) Authenticated user cannot update or delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Is the user signed in?
      function isSignedIn() {
        return request.auth != null;
      }

      // Is the user the owner?
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Is the user the existing owner?
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to form submissions for a specific user.
     * @path /users/{userId}/submissions/{submissionId}
     * @allow (create) Authenticated user can create a submission under their user ID.
     * @allow (get, list, update, delete) Authenticated user can get, list, update, and delete submissions under their user ID.
     * @deny (create) Authenticated user cannot create a submission under another user's ID.
     * @deny (update, delete) Authenticated user cannot update or delete another user's submission.
     * @principle Enforces document ownership for submissions within a user's data tree.
     */
    match /users/{userId}/submissions/{submissionId} {
        // Is the user signed in?
      function isSignedIn() {
        return request.auth != null;
      }

      // Is the user the owner?
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Is the user the existing owner?
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}