/**
 * @fileoverview Firestore Security Rules for LandEase.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model,
 * ensuring that only authenticated users can access their own data. It prioritizes
 * simplicity and security by validating ownership at each level of the data hierarchy.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with the userId matching the Firebase Auth UID.
 * - /users/{userId}/submissions/{submissionId}: Stores form submissions for a specific user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations are restricted to the owner of the data.
 * - The rules explicitly deny any ambiguous or unhandled access patterns.
 *
 * Denormalization for Authorization:
 * - The 'id' field inside the User and Submission documents is used to match the path. This ensures a user cannot create a document under another user's ID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles.
     * @path /users/{userId}
     * @allow (create) - If the user is creating their own profile (auth.uid == userId).
     * @allow (get) - If the user is requesting their own profile (auth.uid == userId).
     * @allow (update) - If the user is updating their own profile (auth.uid == userId).
     * @allow (delete) - If the user is deleting their own profile (auth.uid == userId).
     * @deny (list) - Prevents listing of all users.
     * @deny (create) - If the user is attempting to create a profile for another user (auth.uid != userId).
     * @deny (get) - If the user is attempting to read another user's profile (auth.uid != userId).
     * @deny (update) - If the user is attempting to update another user's profile (auth.uid != userId).
     * @deny (delete) - If the user is attempting to delete another user's profile (auth.uid != userId).
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects user submissions.
     * @path /users/{userId}/submissions/{submissionId}
     * @allow (create) - If the user is creating a submission under their own profile (auth.uid == userId).
     * @allow (get) - If the user is requesting their own submission (auth.uid == userId).
     * @allow (update) - If the user is updating their own submission (auth.uid == userId).
     * @allow (delete) - If the user is deleting their own submission (auth.uid == userId).
     * @deny (list) - If the user is not the owner (auth.uid != userId).
     * @deny (create) - If the user is attempting to create a submission for another user (auth.uid != userId).
     * @deny (get) - If the user is attempting to read another user's submission (auth.uid != userId).
     * @deny (update) - If the user is attempting to update another user's submission (auth.uid != userId).
     * @deny (delete) - If the user is attempting to delete another user's submission (auth.uid != userId).
     * @principle Enforces document ownership for all operations on user submissions.
     */
    match /users/{userId}/submissions/{submissionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == submissionId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }
  }
}