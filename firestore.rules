rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can access their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete): If the authenticated user's UID matches the userId in the path.
     * @deny (get): If the authenticated user's UID does not match the userId in the path.
     * @deny (create): If the authenticated user's UID does not match the userId in the path.
     * @deny (update): If the authenticated user's UID does not match the userId in the path.
     * @deny (delete): If the authenticated user's UID does not match the userId in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure form submissions. Only the authenticated user can access their own submissions.
     * @path /users/{userId}/submissions/{submissionId}
     * @allow (get, create, update, delete): If the authenticated user's UID matches the userId in the path.
     * @deny (get): If the authenticated user's UID does not match the userId in the path.
     * @deny (create): If the authenticated user's UID does not match the userId in the path.
     * @deny (update): If the authenticated user's UID does not match the userId in the path.
     * @deny (delete): If the authenticated user's UID does not match the userId in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/submissions/{submissionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing submissions not allowed - changed from original
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Placeholder for top-level pages collection.  Public read access to pages is allowed.
     * @path /pages/{pageId}
     * @allow (get, list): Public read access.
     * @deny (create, update, delete): No one can create, update, or delete pages in this prototyping phase.
     * @principle Placeholder; access is currently open for reads but closed for writes.
     */
    match /pages/{pageId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}