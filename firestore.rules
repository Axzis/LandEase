/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for private pages
 *              while allowing public read access to published pages.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owner.
 * - /pages/{pageId}: Stores private landing pages, accessible only to the owner.
 * - /publishedPages/{pageId}: Stores public landing pages, publicly readable.
 * - /pages/{pageId}/submissions/{submissionId}: Stores form submissions for a specific page, publicly writable.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can only create, update, and delete their own private pages.
 * - Published pages are stored in a separate collection and are publicly readable.
 * - Anyone can submit forms on published pages, writing to the submissions subcollection.
 * - User listing is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - The 'Page' entity requires the 'userId' field to match the authenticated user's UID for write access.
 * - The 'published' boolean on the 'Page' document is used to control its visibility in the 'pages' collection.
 *
 * Structural Segregation:
 * - Published pages are stored in the 'publishedPages' collection, separate from the private 'pages' collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, list): If the user is the owner of the profile.
     * @allow (create): If the user ID in the document matches the authenticated user's ID.
     * @allow (update, delete): If the user is the owner of the profile and the document exists.
     * @deny Any other operation.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false; // Disallowing user listing for privacy

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to private page documents.
     * @path /pages/{pageId}
     * @allow (get, list): Denied to prevent unauthorized access to unpublished pages.
     * @allow (create): If the user is signed in and the userId matches the authenticated user's ID.
     * @allow (update, delete): If the user is the owner of the page and the document exists.
     * @deny Any other operation.
     * @principle Enforces document ownership for all operations on private pages.
     */
    match /pages/{pageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner() {
        return resource.data.userId == request.auth.uid;
      }
      function isExistingOwner() {
        return isOwner() && existsAfter(/databases/$(database)/documents/pages/$(pageId));
      }

      allow get: if false;
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner() && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner();
    }

    /**
     * @description Allows public read access to published pages.
     * @path /publishedPages/{pageId}
     * @allow (get, list): Public access is allowed.
     * @allow (create, update, delete): Only allowed through backend functions, not directly through the client.
     * @principle Public read access with owner-only writes (through backend).
     */
    match /publishedPages/{pageId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to create submissions for a page.
     * @path /pages/{pageId}/submissions/{submissionId}
     * @allow (create): Any authenticated user can create a submission.
     * @deny All other operations.
     * @principle Public write access for form submissions.
     */
    match /pages/{pageId}/submissions/{submissionId} {
        allow get: if false;
        allow list: if false;

        allow create: if true;
        allow update: if false;
        allow delete: if false;
    }
  }
}