/**
 * @fileoverview Firestore Security Rules for LandEase application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for both user profiles and their associated form submissions.
 * Only authenticated users can access their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, with 'userId' matching the Firebase Auth UID.
 * - /users/{userId}/submissions/{submissionId}: Stores form submissions, nested under the user who submitted them.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own user profiles and submissions.
 * - Listing of all users is disallowed to protect user privacy.
 * - Listing of submissions is allowed only for the owner of the submissions.
 *
 * Denormalization for Authorization:
 * - The 'id' field within both the User and Submission documents must match the 'userId' or 'submissionId' path parameter respectively.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles.  Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile if request.auth.uid == 'user_abc' and request.resource.data.id == 'user_abc'.
     * @allow (get) - User with UID 'user_abc' can read their profile.
     * @allow (update) - User with UID 'user_abc' can update their profile if request.auth.uid == 'user_abc' and request.resource.data.id == resource.data.id.
     * @allow (delete) - User with UID 'user_abc' can delete their profile if request.auth.uid == 'user_abc'.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile for user 'user_abc'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects form submissions. Only the authenticated user can read and write their own submissions.
     * @path /users/{userId}/submissions/{submissionId}
     * @allow (create) - User with UID 'user_abc' can create a submission if request.auth.uid == 'user_abc' and request.resource.data.id == 'submission_xyz'.
     * @allow (get) - User with UID 'user_abc' can read submission 'submission_xyz' if they own it.
     * @allow (list) - User with UID 'user_abc' can list their submissions.
     * @allow (update) - User with UID 'user_abc' can update submission 'submission_xyz' if they own it and request.resource.data.id == resource.data.id.
     * @allow (delete) - User with UID 'user_abc' can delete submission 'submission_xyz' if they own it.
     * @deny (create) - User with UID 'user_xyz' cannot create a submission under user 'user_abc'.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/submissions/{submissionId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == submissionId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }
  }
}