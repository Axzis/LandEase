/**
 * @fileoverview Firestore Security Rules for LandEase Prototyping.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for user profiles and form submissions,
 * ensuring that users can only access their own data.  All potentially sensitive write operations
 * are guarded with identity checks. Data structure is flexible to allow for rapid iteration, but
 * critical fields like ownership are validated.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with the userId matching the Firebase Auth UID.
 * - /users/{userId}/submissions/{submissionId}: Stores form submissions associated with a specific user and page.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the authenticated user.
 * - Form submissions are also private and only accessible to the authenticated user.
 * - Listing of user profiles is denied to prevent enumeration.
 * - Data validation is minimal to facilitate prototyping, focusing on ownership and relational integrity.
 *
 * Denormalization for Authorization:
 * The `userId` is used in the path for both user profiles and submissions, making it readily available for
 * authorization checks without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles, allowing only the owner to read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123.
     * @allow (get,update,delete) - User with UID 'user123' can read/update/delete their profile at /users/user123.
     * @deny (create,update,delete) - User with UID 'user456' cannot create/update/delete the profile at /users/user123.
     * @deny (list) - No user can list all user profiles.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Check if the user is signed in.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      // Allow creation if the userId matches the authenticated user's UID (self-creation).
      allow create: if isSignedIn() && isOwner(userId);
      // Allow update if the user is signed in and is the owner. Enforce immutability of the userId.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure form submissions, allowing only the owner to read and write their own submissions.
     * @path /users/{userId}/submissions/{submissionId}
     * @allow (create) - User 'user123' can create a submission under /users/user123/submissions/sub1.
     * @allow (get,update,delete) - User 'user123' can read/update/delete their submission under /users/user123/submissions/sub1.
     * @deny (create,update,delete) - User 'user456' cannot create/update/delete a submission under /users/user123/submissions/sub1.
     * @deny (list) - No user can list submissions of other users.
     * @principle Enforces document ownership for all operations on form submissions.
     */
    match /users/{userId}/submissions/{submissionId} {
      // Check if the user is signed in.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      // Allow creation if the userId matches the authenticated user's UID (self-creation).
      allow create: if isSignedIn() && isOwner(userId);
      // Allow update if the user is signed in and is the owner. Enforce immutability of the userId.
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}