/**
 * @file Firebase Security Rules for LandEase Prototyping
 *
 * Core Philosophy:
 * This ruleset prioritizes secure user-owned data with flexible schema enforcement for rapid prototyping. It ensures only authenticated users can access their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the respective user.
 * - /users/{userId}/submissions/{submissionId}: Stores form submissions for a specific user, accessible only to the user.
 *
 * Key Security Decisions:
 * - Strict ownership model: Users can only access their own data.
 * - No public listing of users or submissions.
 * - Data validation is minimal, focusing on ownership and relational integrity rather than complete schema enforcement.
 * - Denormalization for Authorization: The `userId` is used in both the `/users/{userId}` path and as the document ID, simplifying ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-specific access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with auth UID matching the userId can create their profile.
     * @allow (get, list, update, delete) User with auth UID matching the userId can access and modify their profile.
     * @deny (create) User cannot create a profile with a userId that does not match their auth UID.
     * @deny (get, list, update, delete) User cannot access or modify another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-specific access to form submissions.
     * @path /users/{userId}/submissions/{submissionId}
     * @allow (create) User with auth UID matching the userId can create submissions under their profile.
     * @allow (get, list, update, delete) User with auth UID matching the userId can access and modify their submissions.
     * @deny (create) User cannot create submissions under another user's profile.
     * @deny (get, list, update, delete) User cannot access or modify another user's submissions.
     * @principle Enforces document ownership and relational integrity for nested data.
     */
    match /users/{userId}/submissions/{submissionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description This rule applies to the `pages` collection that is causing the error.
     * @path /pages/{pageId}
     * @allow (get, list) Any user can read any page.
     * @deny (create, update, delete) No user can create, update, or delete any page.
     * @principle Allows public read access to pages, but restricts write access.
     */
    match /pages/{pageId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}