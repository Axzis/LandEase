/**
 * @fileoverview Firestore Security Rules for LandEase Prototyping.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model. Users can only
 * access their own data, preventing unauthorized access to other users' information.
 * The rules are designed to be permissive regarding the shape of the data to facilitate
 * rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. The `userId` must match the
 *   authenticated user's UID.
 * - /users/{userId}/submissions/{submissionId}: Stores form submissions associated
 *   with a specific user. Access is restricted to the owning user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Data shape validation is minimized to enable rapid prototyping and schema evolution.
 * - Write operations are strictly limited to the authenticated user to prevent
 *   unauthorized modifications.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) - Authenticated user with matching userId.
     * @deny (get, create, update, delete) - Any other user or unauthenticated user.
     * @principle Enforces document ownership.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure form submissions for a specific user.
     * @path /users/{userId}/submissions/{submissionId}
     * @allow (get, list, create, update, delete) - Authenticated user with matching userId.
     * @deny (get, list, create, update, delete) - Any other user or unauthenticated user.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /users/{userId}/submissions/{submissionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
  }
}