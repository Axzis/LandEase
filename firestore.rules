/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for the LandEase application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /users/{userId}/submissions/{submissionId}: Stores form submissions, accessible only to the user who owns them.
 *
 * Key Security Decisions:
 * - User listing is explicitly disallowed.
 * - All writes are protected by authorization checks to prevent unauthorized data modification.
 *
 * Denormalization for Authorization:
 * - The 'id' field within both the User and Submission documents must match the corresponding path parameter (userId, submissionId). This ensures that users can only create/modify data under their own user ID and that submissions are correctly linked to their owner.
 * - Read access to a Submission is only granted to the user that owns the submission, and only if the submission exists.
 *
 * Structural Segregation:
 * - Private user data and form submissions are stored under the /users/{userId} path, ensuring that this information is not publicly accessible.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by the authenticated user.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @returns {bool} - True if the user ID matches the request's auth UID, false otherwise.
     */
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the authenticated user and resource exists.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @returns {bool} - True if the user ID matches the request's auth UID and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }

    /**
     * @description Enforces that the ID in the request matches the ID in the path. Used to prevent ID spoofing.
     * @param {string} userId - The user ID from the path.
     * @returns {bool} - True if the user ID matches the requested user ID, false otherwise.
     */
    function isUserIdConsistent(userId) {
      return request.resource.data.id == userId;
    }

    /**
     * @description Enforces that the ID in the data remains consistent on updates.
     * @param {string} userId - The user ID from the path.
     * @returns {bool} - True if the user ID remains the same, false otherwise.
     */
    function isUserIdConsistentOnUpdate(userId) {
        return request.resource.data.id == resource.data.id;
    }
    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if their auth UID matches the {userId}.
     * @allow (get) - A user can read their own profile.
     * @allow (update) - A user can update their own profile.
     * @allow (delete) - A user can delete their own profile.
     * @deny (create) - A user cannot create a profile for another user.
     * @deny (get) - A user cannot read another user's profile.
     * @deny (update) - A user cannot update another user's profile.
     * @deny (delete) - A user cannot delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Security rules for form submissions under a specific user.
     * @path /users/{userId}/submissions/{submissionId}
     * @allow (create) - A user can create a submission under their own user ID.
     * @allow (get) - A user can read a submission under their own user ID.
     * @allow (update) - A user can update a submission under their own user ID.
     * @allow (delete) - A user can delete a submission under their own user ID.
     * @deny (create) - A user cannot create a submission under another user's ID.
     * @deny (get) - A user cannot read a submission under another user's ID.
     * @deny (update) - A user cannot update a submission under another user's ID.
     * @deny (delete) - A user cannot delete a submission under another user's ID.
     * @principle Enforces document ownership for writes and ensures data consistency.
     */
    match /users/{userId}/submissions/{submissionId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Public read access to pages collection, owner-only writes.
     * @path /pages/{pageId}
     * @allow (get) - Any user can read pages.
     * @allow (list) - Any user can list pages.
     * @allow (create) - Only the owner (identified by authorId) can create a page, and authorId must match the authenticated user's UID.
     * @allow (update) - Only the owner can update a page.
     * @allow (delete) - Only the owner can delete a page.
     * @deny (create) - A user cannot create a page if they are not authenticated or if the authorId does not match their UID.
     * @deny (update) - A user cannot update a page they don't own.
     * @deny (delete) - A user cannot delete a page they don't own.
     * @principle Allows public read access but restricts write access to the owner of the document.
     */
    match /pages/{pageId} {
        allow get: if true;
        allow list: if true;
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        allow update: if request.auth != null && resource.data.authorId == request.auth.uid;
        allow delete: if request.auth != null && resource.data.authorId == request.auth.uid;
    }
  }
}