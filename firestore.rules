/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description This ruleset enforces a strict user-ownership model for the LandEase application.
 * All data is nested under `/users/{userId}`, and only the authenticated user with the matching UID
 * can read or write their own data.  Submissions are stored as subcollections under each user's
 * document.
 *
 * @dataStructure
 * - `/users/{userId}`: Stores user profile data.
 * - `/users/{userId}/submissions/{submissionId}`: Stores form submissions for each user.
 *
 * @keySecurityDecisions
 * - Users can only access their own data. No listing of all users is allowed.
 * - Users can only create, update, and delete submissions under their own user ID.
 * - Data shapes are not strictly enforced to allow for rapid prototyping, but authorization
 *   is strictly enforced.
 * - Denormalization: The rules assume that the `userId` is implicitly tied to the path.
 *
 * @denormalizationForAuthorization
 *  -  The User ID is encoded in the path for `/users/{userId}`.  This avoids needing to store
 *     the user ID within the document itself and simplifies authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile document.
     * @allow (get) - User with UID 'user_abc' can read their own profile document.
     * @allow (update) - User with UID 'user_abc' can update their own profile document.
     * @allow (delete) - User with UID 'user_abc' can delete their own profile document.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile document for 'user_abc'.
     * @deny (get) - User with UID 'user_xyz' cannot read the profile document of 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow a user to create their own profile.
      allow create: if isOwner(userId);

      // Allow a user to read their own profile.
      allow get: if isOwner(userId);

      // Allow a user to update their own profile.
      allow update: if isOwner(userId) && resource != null;

      // Allow a user to delete their own profile.
      allow delete: if isOwner(userId) && resource != null;

      // Prevent listing all users.
      allow list: if false;

      /**
       * @description Enforces user-ownership for submissions. Only the authenticated user can read or write submissions under their own user ID.
       * @path /users/{userId}/submissions/{submissionId}
       * @allow (create) - User with UID 'user_abc' can create a submission under their user ID.
       * @allow (get) - User with UID 'user_abc' can read a submission under their user ID.
       * @allow (update) - User with UID 'user_abc' can update a submission under their user ID.
       * @allow (delete) - User with UID 'user_abc' can delete a submission under their user ID.
       * @deny (create) - User with UID 'user_xyz' cannot create a submission under 'user_abc'.
       * @deny (get) - User with UID 'user_xyz' cannot read a submission of 'user_abc'.
       * @principle Enforces document ownership for writes.
       */
      match /submissions/{submissionId} {
        // Helper function to check if the authenticated user is the owner of the submission.
        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        // Allow a user to create a submission under their own user ID.
        allow create: if isOwner(userId);

        // Allow a user to read a submission under their own user ID.
        allow get: if isOwner(userId);

        // Allow a user to update a submission under their own user ID.
        allow update: if isExistingOwner(userId);

        // Allow a user to delete a submission under their own user ID.
        allow delete: if isExistingOwner(userId);

        // Allow a user to list submissions under their own user ID.
        allow list: if isOwner(userId);
      }
    }
  }
}